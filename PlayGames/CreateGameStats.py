def GenerateShots():
    import random
    Upper = [6, 10, 14, 20]
    Lower = [2, 4, 5]
    UpperValue = random.choice(Upper)
    LowerValue = random.choice(Lower)
    Shots = random.randint(LowerValue, UpperValue)
    ShotsOnTarget = random.randint(0, Shots)
    return [Shots, ShotsOnTarget]


def GenerateTouches():
    import random
    Upper = [60, 100, 140, 200]
    Lower = [20, 40, 50]
    UpperValue = random.choice(Upper)
    LowerValue = random.choice(Lower)
    Touches = random.randint(LowerValue, UpperValue)
    TouchesInFinalThrid = random.randint(0, Touches)
    return [Touches, TouchesInFinalThrid]


def GeneratePossion():
    import random
    random_percentage = random.random() * 100
    Home = round(random_percentage, 1)
    Away = round(100 - Home,1)
    return [Home, Away]


def GenerateYellowCards():
    import random
    cards = [0, 1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 7]
    random_cards = random.choice(cards)
    return random_cards


def GenerateRedCards():
    import random
    cards = [0, 0, 0, 0, 0, 0, 0, 1, 1, 2]
    random_cards = random.choice(cards)
    return random_cards


def generate_random_scores():
    import random
    possible_scores = [0, 1, 2, 3, 4, 5]
    # Selecting two random scores from the possible_scores list
    A = random.choice(possible_scores)
    B = random.choice(possible_scores)
    # Returning the scores as a tuple
    print ([A, B])
    return [A, B]

def match_outcome(score_list):
    outcome = ''
    for home_score, away_score in score_list:
        if home_score > away_score:
            outcome = 'H'
        elif away_score > home_score:
            outcome = 'A'
        else:
            outcome = 'D'
    return outcome


def GenerateGameStates(GameID):
    Possession = GeneratePossion()
    HomePossession = Possession[0]
    HomeYellow = GenerateYellowCards()
    HomeRed = GenerateRedCards()
    HomeS = GenerateShots()
    HomeShots = HomeS[0]
    HomeShotsOnTarget = HomeS[1]
    HomeT = GenerateTouches()
    HomeTouches = HomeT[0]
    HomeTouchesInFinalThrid = HomeT[1]
    ### Away Data
    AwayPossession = Possession[1]
    AwayYellow = GenerateYellowCards()
    AwayRed = GenerateRedCards()
    AwayS = GenerateShots()
    AwayShots = AwayS[0]
    AwayShotsOnTarget = AwayS[1]
    AwayT = GenerateTouches()
    AwayTouches = AwayT[0]
    AwayTouchesInFinalThird = AwayT[1]
    Score  = generate_random_scores()
    HomeScore = Score[0]
    AwayScore = Score[1]
    matchOutcome = match_outcome([(HomeScore, AwayScore)])

    ### RowData
    data_row = [
        GameID,
        HomePossession,
        HomeYellow,  # Generated by GenerateYellowCards for the home team
        HomeRed,  # Generated by GenerateRedCards for the home team
        HomeShots,  # Total shots by the home team
        HomeShotsOnTarget,  # Shots on target by the home team
        HomeTouches,  # Total touches by the home team
        HomeTouchesInFinalThrid,  # Touches in the final third by the home team
        AwayPossession,
        AwayYellow,  # Generated by GenerateYellowCards for the away team
        AwayRed,  # Generated by GenerateRedCards for the away team
        AwayShots,  # Total shots by the away team
        AwayShotsOnTarget,  # Shots on target by the away team
        AwayTouches,  # Total touches by the away team
        AwayTouchesInFinalThird , # Touches in the final third by the away team,
        HomeScore,
        AwayScore,
        matchOutcome
    ]
    return data_row